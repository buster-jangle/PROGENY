
set(LIB_SOURCES
		src/PROGENY_PROJECT_NAME.cpp
		)

set(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_LIST_DIR}/lib) # put compiled library in lib/

# Dynamic library
add_library(PROGENY_PROJECT_NAME SHARED src/PROGENY_PROJECT_NAME.cpp)
set_target_properties(PROGENY_PROJECT_NAME PROPERTIES VERSION ${MAJOR_VERSION}.${MINOR_VERSION}.0 SOVERSION 0)

#Static library
add_library(PROGENY_PROJECT_NAME-static STATIC ${LIB_SOURCES}) #Library is not declared static or shared. This is defined in the top-level cmake options
set_target_properties(PROGENY_PROJECT_NAME-static PROPERTIES OUTPUT_NAME "PROGENY_PROJECT_NAME")

include_directories(${CMAKE_CURRENT_LIST_DIR}/inc/)
set_target_properties("PROGENY_PROJECT_NAME" PROPERTIES PUBLIC_HEADER "inc/PROGENY_PROJECT_NAME.h")


if(DEFINED LIBRARY_INSTALL_PATH AND INSTALL_LIBS)
	message(STATUS "Will install libraries at  ${LIBRARY_INSTALL_PATH}")
	install(TARGETS "PROGENY_PROJECT_NAME" LIBRARY DESTINATION ${LIBRARY_INSTALL_PATH})
	install(TARGETS "PROGENY_PROJECT_NAME" LIBRARY DESTINATION ${LIBRARY_INSTALL_PATH})
endif()
if(DEFINED HEADER_INSTALL_PATH AND INSTALL_HEADERS)
	message(STATUS "Will install headers at  ${HEADER_INSTALL_PATH}")
	install(TARGETS "PROGENY_PROJECT_NAME" PUBLIC_HEADER DESTINATION ${HEADER_INSTALL_PATH})
endif()



